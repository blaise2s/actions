name: Create Release Since Previous Tag
run-name: Create release for ${{ inputs.repository }} since ${{ inputs.previousTagName }}

on:
  workflow_dispatch:
    inputs:
      repository:
        description: Repository name with owner. For example, Microsoft/Typescript.
        type: string
        required: true
      tagName:
        description: >
          The tag name for the release.
          This can be an existing tag or a new one.
        type: string
        required: true
      targetCommitish:
        description: >
          Specifies the commitish value that will be
          the target for the release's tag. Required
          if the supplied tag_name does not reference
          an existing tag. Ignored if the tag_name
          already exists.
        type: string
        required: true
      previousTagName:
        description: >
          The name of the previous tag to use as the
          starting point for the release notes. Use
          to manually specify the range for the set
          of changes considered as part this release.
        type: string
        required: true
      configurationFilePath:
        description: >
          Specifies a path to a file in the repository
          containing configuration settings used for
          generating the release notes. If unspecified,
          the configuration file located in the repository
          at '.github/release.yml' or '.github/release.yaml'
          will be used. If that is not present, the default
          configuration will be used.
        type: string
        required: false
        default: ''
      draft:
        description: >
          true to create a draft (unpublished) release,
          false to create a published one.
        type: boolean
        required: false
        default: false
      prerelease:
        description: >
          true to identify the release as a prerelease.
          false to identify the release as a full release.
        type: boolean
        required: false
        default: false
      discussionCategoryName:
        description: >
          If specified, a discussion of the specified category
          is created and linked to the release. The value must
          be a category that already exists in the repository.
          For more information, see
          https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository.
        required: false
        default: ''
      makeLatest:
        description: >
          Specifies whether this release should be set as the latest release
          for the repository. Drafts and prereleases cannot be set as latest.
          Defaults to true for newly published releases. legacy specifies that
          the latest release should be determined based on the release creation
          date and higher semantic version. Can be one of: true, false, legacy.
        type: choice
        required: false
        default: 'true'
        options:
          - 'true'
          - 'false'
          - legacy

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.generateReleaseNotes.outputs.name }}
      body: ${{ steps.generateReleaseNotes.outputs.body }}
    steps:
      - name: Generate release notes for ${{ inputs.repository }}
        id: generateReleaseNotes
        uses: blaise2s/actions/generate-release-notes@main
        with:
          repository: ${{ inputs.repository }}
          tagName: ${{ inputs.tagName }}
          targetCommitish: ${{ inputs.targetCommitish }}
          previousTagName: ${{ inputs.previousTagName }}
          configurationFilePath: ${{ inputs.configurationFilePath }}
          token: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: generate-release-notes
    runs-on: ubuntu-latest
    steps:
      - name: Create release for ${{ inputs.repository }}
        uses: blaise2s/actions/create-release@main
        with:
          repository: ${{ inputs.repository }}
          tagName: ${{ inputs.tagName }}
          targetCommitish: ${{ inputs.targetCommitish }}
          name: ${{ needs.generate-release-notes.outputs.name }}
          body: ${{ needs.generate-release-notes.outputs.body }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          discussionCategoryName: ${{ inputs.discussionCategoryName }}
          generateReleaseNotes: false
          makeLatest: ${{ inputs.makeLatest }}
          token: ${{ secrets.GITHUB_TOKEN }}
